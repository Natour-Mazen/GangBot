import { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, PermissionsBitField } from 'discord.js';
import eventHandler from "../../../../index.js";
import BasicCommand from "../../basicCommand.js";
import fs from "fs";

class CancelReminderCommand extends BasicCommand {
    constructor() {
        super('admin_cancelreminder', 'Annule un √©v√©nement programm√©.');
    }

    async handleCommand(interaction) {
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
            return await interaction.reply({
                content: 'üö´ Vous devez √™tre administrateur pour utiliser cette commande.',
                ephemeral: true,
            });
        }

        // R√©cup√©rer la liste des √©v√©nements programm√©s
        const scheduledEvents = eventHandler.getScheduledEvents();

        if (scheduledEvents.length === 0) {
            return await interaction.reply({
                content: '‚ùå Aucun √©v√©nement programm√© disponible √† annuler.',
                ephemeral: true,
            });
        }

        // G√©n√©rer une liste des √©v√©nements disponibles
        const eventsList = scheduledEvents
            .map(event => `‚Ä¢ ${event.eventName} (ID: ${event.eventID})`)
            .join('\n');

        // Afficher une modal avec la liste des √©v√©nements et demander √† l'utilisateur d'entrer un ID
        const modal = this.createCancelReminderModal(eventsList);
        await interaction.showModal(modal);

        // Attendre la soumission de la modal
        interaction.awaitModalSubmit({ filter: i => i.customId === 'cancel_reminder_modal', time: 300000 })
            .then(async submittedInteraction => {
                const eventID = submittedInteraction.fields.getTextInputValue('event_id');

                // V√©rifier l'√©v√©nement s√©lectionn√©
                const selectedEvent = scheduledEvents.find(event => event.eventID === eventID);

                if (!selectedEvent) {
                    return await submittedInteraction.reply({
                        content: '‚ùå Aucun √©v√©nement avec cet ID trouv√©. Veuillez r√©essayer.',
                        ephemeral: true,
                    });
                }

                eventHandler.cancelEvent(eventID);

                await submittedInteraction.reply({
                    content: `‚úÖ L'√©v√©nement **${selectedEvent.eventName}** a √©t√© annul√© avec succ√®s.`,
                    ephemeral: true,
                });
            })
            .catch(async error => {
                console.error('Erreur lors de la soumission de la modal :', error);
                await interaction.followUp({ content: '‚ùå Temps √©coul√© ou erreur. Veuillez r√©essayer.', ephemeral: true });
            });
    }

    createCancelReminderModal(eventsList) {
        const modal = new ModalBuilder()
            .setCustomId('cancel_reminder_modal')
            .setTitle('Annuler un rappel');

        const eventsListInput = new TextInputBuilder()
            .setCustomId('events_list')
            .setLabel('√âv√©nements disponibles (lecture seule)')
            .setStyle(TextInputStyle.Paragraph)
            .setValue(eventsList)
            .setRequired(false); // Champ non modifiable par l'utilisateur

        const eventIDInput = new TextInputBuilder()
            .setCustomId('event_id')
            .setLabel('ID de l\'√©v√©nement √† annuler')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Exemple : abc123-def456-ghi789')
            .setRequired(true);

        modal.addComponents(
            new ActionRowBuilder().addComponents(eventIDInput),
            new ActionRowBuilder().addComponents(eventsListInput)
        );

        return modal;
    }

    addOptionalCommandData() {
        // Aucune option suppl√©mentaire n√©cessaire ici pour la commande
    }
}

export default new CancelReminderCommand();
